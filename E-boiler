import pandas as pd

# De gebruikte excel files laden
file_dayahead_2023 = '/content/day-ahead prices 2023.xlsx' # hier moet u de github data van day-ahead 2023 zetten
file_dayahead_2024 = '/content/day-ahead prices 2024.xlsx' # hier moet u de github data van day-ahead 2024 zetten
file_onbalans_2023 = '/content/Imbalance 2023.xlsx' #  hier moet u de github data van onbalans 2023 zetten
file_onbalans_2024 = '/content/Imbalance 2024.xlsx' # hier moet u de github data van onbalans 2024 zetten

# Lezen van de data bij day-ahead excel files. Ook hier wordt row 4 genegeerd want er is metadata daarin dat onbelangrijk is
prijzen_dayahead_2023 = pd.read_excel(file_dayahead_2023, skiprows=4)
prijzen_dayahead_2024 = pd.read_excel(file_dayahead_2024, skiprows=4)

# Bij hier worden de eerste twee rows en hun namen van de day-ahead data uitgehaald
prijzen_dayahead_2023_c = prijzen_dayahead_2023.drop([0, 1]).reset_index(drop=True)
prijzen_dayahead_2024_c = prijzen_dayahead_2024.drop([0, 1]).reset_index(drop=True)

# Na het uithalen van de naam van de eerste twee rows van de day-ahead data worden er hier nieuwe namen gegeven voor beter begrijpen
prijzen_dayahead_2023_c.columns = ['Tijd', 'Prijs_EUR_per_MWh', 'Currency']
prijzen_dayahead_2024_c.columns = ['Tijd', 'Prijs_EUR_per_MWh', 'Currency']

# De currency column van de day-ahead data wordt uitgehaald want het is wel vastgelegd in euro
prijzen_dayahead_2023_c = prijzen_dayahead_2023_c.drop(columns=['Currency'])
prijzen_dayahead_2024_c = prijzen_dayahead_2024_c.drop(columns=['Currency'])

# Hier wordt de Prijs_EUR_per_MWh column van de day-ahead data omgezet naar numeric en letters die error geven worden als NaN(Not a Number) gezien
prijzen_dayahead_2023_c['Prijs_EUR_per_MWh'] = pd.to_numeric(prijzen_dayahead_2023_c['Prijs_EUR_per_MWh'], errors='coerce')
prijzen_dayahead_2024_c['Prijs_EUR_per_MWh'] = pd.to_numeric(prijzen_dayahead_2024_c['Prijs_EUR_per_MWh'], errors='coerce')

# Lezen van de data bij onbalans excel files. Ook hier wordt row 4 genegeerd want er is metadata daarin dat onbelangrijk is
onbalans_2023 = pd.read_excel(file_onbalans_2023, skiprows=4)
onbalans_2024 = pd.read_excel(file_onbalans_2024, skiprows=4)

# Bij hier worden de eerste 8 rows van de eerste twee columns van de onbalans uitgehaald met hun namen doordat er meta data's bij deze plekken
onbalans_2023_c = onbalans_2023.iloc[7:, [0, 1]].reset_index(drop=True)
onbalans_2024_c = onbalans_2024.iloc[7:, [0, 1]].reset_index(drop=True)

# Na het uithalen van de naam van de 8 rows in de eerste twee columns van de onbalans data worden er hier nieuwe namen gegeven voor beter begrijpen
onbalans_2023_c.columns = ['Tijd', 'Prijs_EUR_per_MWh']
onbalans_2024_c.columns = ['Tijd', 'Prijs_EUR_per_MWh']

# Hier wordt de Prijs_EUR_per_MWh column van de onbalans data omgezet naar numeric en letters die error geven worden als NaN(Not a Number) gezien
onbalans_2023_c['Prijs_EUR_per_MWh'] = pd.to_numeric(onbalans_2023_c['Prijs_EUR_per_MWh'], errors='coerce')
onbalans_2024_c['Prijs_EUR_per_MWh'] = pd.to_numeric(onbalans_2024_c['Prijs_EUR_per_MWh'], errors='coerce')

# Hier wordt de gas prijs per kWh berekend van 0.30 euro per m^3 en 1 m^3=9.796 kWh
gas_prijs = 0.30 / 9.796  # in kWh

# Hier wordt er gezien of op de ene moment volgens de data de gas-boiler of de E-boiler meer efficient is. Ook wordt er unknown gegeven als er geen data is geschreven
def efficient_boiler(electriciteit_prijs, gas_prijs):
    if pd.isna(electriciteit_prijs):
        return 'Unknown'
    if electriciteit_prijs < gas_prijs / 1000:  # Dit is om de gas prijs omzetten naar euro/MWh
        return 'E-boiler'
    else:
        return 'Gas-boiler'

# Deze function is om de gas prijs te laten zien. De electriciteit prijs is al gegeven in de 2 data's. Ook hier wordt geen gas-prijs data gegeven als er geen electriciteit prijs is gegeven
def gas_prijs_berekenen(efficient_boiler, prijs_EUR_per_MWh, gas_prijs):
    if pd.isna(prijs_EUR_per_MWh) or efficient_boiler == 'Unknown':
        return float('nan')  # geeft NaN als een data mist
    elif efficient_boiler == 'E-boiler':
        return 0
    else:
        return gas_prijs


# Hier wordt de eerste funtion van de efficient_boiler en gas-prijs toegepast aan de day-ahead data
prijzen_dayahead_2023_c['Efficient_Boiler'] = prijzen_dayahead_2023_c['Prijs_EUR_per_MWh'].apply(efficient_boiler, gas_prijs=gas_prijs)
prijzen_dayahead_2024_c['Efficient_Boiler'] = prijzen_dayahead_2024_c['Prijs_EUR_per_MWh'].apply(efficient_boiler, gas_prijs=gas_prijs)

#Hier wordt de tweede function gas_prijs_berekenen en gas-prijs toegepast aan de day-ahead data
prijzen_dayahead_2023_c['Gas_Prijs'] = prijzen_dayahead_2023_c.apply(lambda row: gas_prijs_berekenen(row['Efficient_Boiler'], row['Prijs_EUR_per_MWh'], gas_prijs), axis=1)
prijzen_dayahead_2024_c['Gas_Prijs'] = prijzen_dayahead_2024_c.apply(lambda row: gas_prijs_berekenen(row['Efficient_Boiler'], row['Prijs_EUR_per_MWh'], gas_prijs), axis=1)

# Hier wordt de eerste funtion van de efficient_boiler en gas-prijs toegepast aan de onbalans data
onbalans_2023_c['Efficient_Boiler'] = onbalans_2023_c['Prijs_EUR_per_MWh'].apply(efficient_boiler, gas_prijs=gas_prijs)
onbalans_2024_c['Efficient_Boiler'] = onbalans_2024_c['Prijs_EUR_per_MWh'].apply(efficient_boiler, gas_prijs=gas_prijs)

#Hier wordt de tweede function gas_prijs_berekenen en gas-prijs toegepast aan de onbalans data
onbalans_2023_c['Gas_Prijs'] = onbalans_2023_c.apply(lambda row: gas_prijs_berekenen(row['Efficient_Boiler'], row['Prijs_EUR_per_MWh'], gas_prijs), axis=1)
onbalans_2024_c['Gas_Prijs'] = onbalans_2024_c.apply(lambda row: gas_prijs_berekenen(row['Efficient_Boiler'], row['Prijs_EUR_per_MWh'], gas_prijs), axis=1)

# Hier worden beide data's van day-ahead en onbalans gecombineerd voor vergelijken van mix E-boiler gas-boiler in een jaar met alleen gas-boiler in een jaar
alles_2023 = pd.concat([prijzen_dayahead_2023_c, onbalans_2023_c], ignore_index=True)
alles_2024 = pd.concat([prijzen_dayahead_2024_c, onbalans_2024_c], ignore_index=True)

# Hier wordt de totale kosten van  alleen gas-boiler gebruiken bij de gecombineerde data's berekend
gas_kost_2023 = alles_2023['Prijs_EUR_per_MWh'].apply(lambda x: gas_prijs).sum()
gas_kost_2024 = alles_2024['Prijs_EUR_per_MWh'].apply(lambda x: gas_prijs).sum()

# Hier wordt de totale kosten van een mix van E-boiler en gas-boiler gebruiken bij de gecombineerde data's berekend
mixed_kost_2023 = alles_2023['Gas_Prijs'].sum()
mixed_kost_2024 = alles_2024['Gas_Prijs'].sum()

# Hier wordt de totale prijs van als er alleen gas-boiler gebruikt met de totale prijs van een mix van gas-boiler en E-boiler vergeleken
efficiente_manier_2023 = 'Mixed (E-boiler en Gas-boiler)' if mixed_kost_2023 < gas_kost_2023 else 'Alleen Gas-boiler '
efficiente_manier_2024 = 'Mixed (E-boiler en Gas-boiler)' if mixed_kost_2024 < gas_kost_2024 else 'Alleen Gas-boiler '



print("\nTotale gas kost 2023:")
print(gas_kost_2023)

print("\nTotale gas kost 2024:")
print(gas_kost_2024)

print("\nTotale kost E-boiler en Gas-boiler 2023:")
print(mixed_kost_2023)

print("\nTotale kost E-boiler en Gas-boiler 2024:")
print(mixed_kost_2024)

print("\nefficiente manier 2023:")
print(efficiente_manier_2023)

print("\nefficiente manier 2024:")
print(efficiente_manier_2024)

# Dit helpt doordat de data dat is gemaakt over welke boiler is meer efficient kan nu opgeslagen worden bij de gebruikte excelfile data's
prijzen_dayahead_2023_c.to_excel('/content/day-ahead prices 2023.xlsx', index=False)
prijzen_dayahead_2024_c.to_excel('/content/day-ahead prices 2024.xlsx', index=False)
onbalans_2023_c.to_excel('/content/Imbalance 2023.xlsx', index=False)
onbalans_2024_c.to_excel('/content/Imbalance 2024.xlsx', index=False)
